using namespace System;
using namespace pdistd;

namespace gtengine
{
	/** \brief Represents an online lobby configuration. */
	class MRoomConfig : public Object
	{
		public:
		  MRoomConfig() { };
		  MRoomConfig(MGameParameter gp) { };
		  MRoomConfig(MRoomConfig src) { };

		  void deepCopy(MRoomConfig src);

		  String comment;
		  String password;
		  RoomType room_type;
		  RoomPolicy room_policy;
		  Scope scope;
		  ChatType chat_type;
		  CarShuffleMethod car_shuffle_method;
		  CarSelectMethod car_select_method;
		  CarFilterType car_filter_type;
		  CourseSelectMethod course_select_method;
		  TopologyType topology;
		  VoiceChatMode voice_chat_mode;
		  VoiceQuality voice_quality;
		  Int room_max;
		  Int racer_max;
		  Int race_countdown;
		  Bool auto_grant_ownership;
		  Bool nat_restriction;
		  Bool exclude_blocklist;
		  Bool voice_chat;
		  Bool is_lan;
		  Bool fill_vacancy;
		  Bool overwrite_user_name;
		  Bool overwrite_user_region;
		  Bool show_hidden_config;
		  Bool use_custom_grid;
		  Bool use_custom_countdown;
		  Bool auto_replay_save;
		  RoomGameMode room_game_mode;
		  TrackDayMode trackday_mode;
		  BattleMode battle_mode;
		  RaceType qualifier_race_type;
		  Int qualifier_begin;
		  MTime qualifier_begin_local;
		  Int qualifier_period;
		  Int freerun_penalty;
		  Bool freerun_collision;
		  Int shuffle_base;
		  Int shuffle_ratio;
		  Bool is_autocratic;
		  Bool is_automated;
		  Bool is_only_garage_car;
		  Bool is_only_rental_car;
		  Int is_saved_course;
		  TrackDayWeather weather;
		  GameRegionCode game_region_code;
		  String lounge_owner_id;
		  MTime alarm_time_local;
		  Int alarm_time;
		  Int alarm_time_value;
		  ULong generated_course_id;
		  ULong club_id;
		  ULong club_event_id;
		  UInt matching_event_id32;
		  Int event_setting_version;
		  Int event_setting_hash;
		  QualityControlTemplateType quality_control_template_type;
		  Any online_series;
		  UInt online_series_count;
		  OnlineSeriesPointType series_point_type;
		  Array<Int> series_point_table;
		  Int booby_point;
		  GameMode game_mode;
		  Int simulation;
		  Int driving_line;
		  Int asm;
		  Int tcs;
		  Int abs;
		  Int active_steering;
		  Int suggested_gear;
		  Int in_car_view;
		  Int limit_tire;
		  Int limit_pp;
		  Int limit_power;
		  Int limit_weight;
		  Int need_weight;
		  Int need_drivetrain;
		  Int tuning;
		  Int nitro;
		  Int car_tag_id;
		  Int kart_permitted;
		  Int restrictor_limit;
		  Array<MCarThin> cars;
		  Array tuners;
		  Array countries;
		  ULong course_code;
		  UInt real_course_code;
		  UInt scenery_code;
		  UInt scenery_course_code;
		  PenaltyLevelTypes penalty_level;
		  GridSortType grid_sort_type;
		  Int boost_level;
		  Int event_start_v;
		  Int event_goal_v;
		  Bool endless;
		  Int initial_retention10;
		  Int weather_accel10;
		  Int weather_accel_water_retention10;
		  Float weather_value0;
		  Float weather_value0l;
		  Float weather_value0h;
		  Float weather_value0b;
		  Bool disable_collision;
		  Bool force_pitcrew_off;
		  Bool enable_damage;
		  LowMuType low_mu_type;
		  BehaviorDamageType behavior_damage_type;
		  BehaviorSlipStreamType behavior_slip_stream_type;
		  Bool need_tire_change;
		  Int pit_constraint;
		  Int after_race_penalty_sec5;
		  UInt team_count;
		  StartType start_type;
		  FinishType finish_type;
		  UInt race_limit_laps;
		  UInt race_limit_minute;
		  Int time_to_finish;
		  UInt consume_tire;
		  UInt consume_fuel;
		  Int temperature_brake;
		  Int temperature_tire;
		  Int temperature_engine;
		  AttackSeparateType attack_separate_type;
		  StartType trial_start_type;
		  UInt auto_standing_delay;
		  Int accumulation;
		  MTime datetime;
		  Float time_progress_speed;

		  Bool isIdentical(MRoomConfig config);
		  Map createChanged(MGameParameter gp);
		  Map createChanged(MRoomConfig rc);
		  Short getGeneralValue16(Int unk);
		  void setGeneralValue16(Int unk, Short value);
		  Int getGeneralValue32(Int unk);
		  void setGeneralValue32(Int unk, Int value);
		  Bool hasQualifier();
		  Bool isEnduranceMode();
		  Bool isClubRoom();
		  Bool isGeneratedCourse();
		  void setGeneratedCourse(Bool generated);
		  void setConsumptionParameter(Int unk);
		  void applySeriesParameter(Int unk);
		  void applyRoomGameMode();
		  UInt computeEventSettingHash();
		  Bool validateEventSettingHash();
		  void updateEventSettingHash();
		  Map createRoomInformation();
		  void setTrackEditData(ByteData data);
		  MGameParameter getGameParameter();
		  MGameParameter createGameParameter();
		  MRaceParameter getRaceParameter();
		  void setup();
		  void setupDateTime();
		  ByteData pack();
		  Bool unpack(ByteData data);

		  const Short VERSION = 0x28;
		  const Int INVALID_VALUE_INT = 0x28;
		  const Int UNCHANGED_VALUE_INT = 0x28;
		  const Int CHANGED_VALUE_INT = 0x28;
		  const UInt ROOM_COMMENT_SIZE = 64;
		  const UInt ONLINE_SERIES_COUNT_MAX = 5;
		  const UInt TUNER_LIST_SIZE = 5;
		  const UInt COUNTRY_LIST_SIZE = 5;
    }
}